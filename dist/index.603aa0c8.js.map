{"mappings":"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","sources":["data.js","script.js"],"sourcesContent":["export const testData = [\r\n  {\r\n    description: \"Buy a frame for a picture\",\r\n    completed: 0,\r\n    dateTaskCreated: 1679836195906,\r\n    deadline: 1687870800000,\r\n  },\r\n  {\r\n    completed: 0,\r\n    dateTaskCreated: 1679836120215,\r\n    deadline: 1681999200000,\r\n    description: \"Register for the doctor appointment\",\r\n    timeLeft: 2163079785,\r\n  },\r\n  {\r\n    description: \"Buy food for dog\",\r\n    dateTaskCreated: 1679836049730,\r\n    deadline: 1680440400000,\r\n    timeLeft: 604279785,\r\n  },\r\n  {\r\n    description: \"Wash my car\",\r\n    dateTaskCreated: 1679836017465,\r\n    deadline: 1679857200000,\r\n    completed: 0,\r\n    timeLeft: 21079785,\r\n  },\r\n];\r\n","import { testData } from \"./data.js\";\r\n\r\nconst form = document.querySelector(\".form\");\r\nconst listContainer = document.querySelector(\".list\");\r\nconst inputDescription = document.querySelector(\".form__input--description\");\r\nconst inputTime = document.querySelector(\".form__input--time\");\r\nconst addBtn = document.querySelector(\".add__btn\");\r\nconst newestSort = document.querySelector(\".sort__byDate\");\r\nconst completedSort = document.querySelector(\".sort__byCompleted\");\r\nconst leastTimeLeftSort = document.querySelector(\".sort__byTimeLeft\");\r\n\r\nclass Task {\r\n  description;\r\n  dateTaskCreated;\r\n  deadline = null;\r\n  timeLeft;\r\n  completed = 0;\r\n\r\n  constructor(description, dateTaskCreated, deadline = null) {\r\n    this.description = description;\r\n    this.deadline = deadline;\r\n    this.dateTaskCreated = dateTaskCreated;\r\n  }\r\n}\r\n\r\nclass App {\r\n  list = [];\r\n  dateNow;\r\n\r\n  constructor() {\r\n    sessionStorage.setItem(\"tasks\", JSON.stringify(testData));\r\n    this.dateNow = Date.now();\r\n    addBtn.addEventListener(\"click\", this.addTask.bind(this));\r\n    this.getSessionStorage();\r\n    this.updateList(this.list);\r\n    newestSort.addEventListener(\"click\", this.sortByDate.bind(this));\r\n    completedSort.addEventListener(\"click\", this.sortByCompleted.bind(this));\r\n    leastTimeLeftSort.addEventListener(\"click\", this.sortByTimeLeft.bind(this));\r\n  }\r\n\r\n  addTask(e) {\r\n    e.preventDefault();\r\n\r\n    const description = inputDescription.value;\r\n    const deadlineInput = inputTime.value;\r\n    let deadline;\r\n    if (!deadlineInput) {\r\n      deadline = Infinity;\r\n    } else {\r\n      deadline = Number(new Date(deadlineInput));\r\n    }\r\n    const dateTaskCreated = Date.now();\r\n\r\n    if (this.validateInput(description, deadline, dateTaskCreated)) {\r\n      let task = new Task(description, dateTaskCreated, deadline);\r\n      const updatedList = [...this.list, task];\r\n      this.updateList(updatedList);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    inputDescription.value = \"\";\r\n    inputTime.value = \"\";\r\n  }\r\n\r\n  deleteTask(e) {\r\n    e.preventDefault();\r\n    const answer = confirm(\"Are you sure you want to delete this task?\");\r\n    if (answer == false) {\r\n      return;\r\n    }\r\n    const dateTaskCreated = e.target.attributes.data.value;\r\n    const updatedList = this.list?.filter(\r\n      (item) => +item.dateTaskCreated !== +dateTaskCreated\r\n    );\r\n    this.updateList(updatedList);\r\n  }\r\n\r\n  completeTask(e) {\r\n    e.preventDefault();\r\n    const dateTaskCreated = e.target.attributes.data.value;\r\n    const updatedList = this.list.map((item) =>\r\n      +item.dateTaskCreated === +dateTaskCreated\r\n        ? { ...item, completed: true }\r\n        : { ...item }\r\n    );\r\n\r\n    this.updateList(updatedList);\r\n  }\r\n\r\n  renderTasks(tasks) {\r\n    let html = ``;\r\n\r\n    for (let task of tasks) {\r\n      const completed = task?.completed\r\n        ? \"completed__true\"\r\n        : \"completed__false\";\r\n      const check = task?.completed ? \"check\" : \"\";\r\n      let displayedLeft;\r\n      if (task.timeLeft !== Infinity) {\r\n        displayedLeft = this.calcTimeLeft(Math.round(task.timeLeft));\r\n      } else {\r\n        displayedLeft = \"\";\r\n      }\r\n\r\n      html += `\r\n      <li class=\"single__task \">\r\n      <div class=\"single__task__info ${completed}\">\r\n        <div class=\"description\">${task.description}</div>\r\n        <div>${displayedLeft}</div>\r\n      </div>\r\n        <div class=\"single__task__btns\">\r\n          \r\n          <button class=\"delete__btn\" data=${task.dateTaskCreated} >Delete\r\n          </button>\r\n          <div class=\"check-container complete__btn\" >\r\n            <input   type=\"checkbox\" dateTaskCreated=\"done\" name=\"done\" />\r\n            <span class=\"checkmark ${check}\" data=${task.dateTaskCreated}></span>\r\n          </div>\r\n        </div>\r\n      </li> \r\n      `;\r\n    }\r\n\r\n    listContainer.innerHTML = html;\r\n  }\r\n\r\n  getSessionStorage() {\r\n    const data = JSON.parse(sessionStorage.getItem(\"tasks\"));\r\n    if (!data) return;\r\n    for (let item of data) {\r\n      if (item.deadline !== Infinity && item.deadline !== null) {\r\n        item.timeLeft = item.deadline - Date.now();\r\n      } else {\r\n        item.timeLeft = Infinity;\r\n      }\r\n    }\r\n    this.list = data;\r\n  }\r\n\r\n  updateList(updatedList) {\r\n    sessionStorage.setItem(\"tasks\", JSON.stringify(updatedList));\r\n    this.getSessionStorage();\r\n    this.renderTasks(this.list);\r\n\r\n    const completeBtns = document.querySelectorAll(\".complete__btn\");\r\n    const deleteBtns = document.querySelectorAll(\".delete__btn\");\r\n    completeBtns.forEach((btn) =>\r\n      btn.addEventListener(\"click\", this.completeTask.bind(this))\r\n    );\r\n    deleteBtns.forEach((btn) =>\r\n      btn.addEventListener(\"click\", this.deleteTask.bind(this))\r\n    );\r\n  }\r\n\r\n  sortByDate() {\r\n    const updatedList = this.list.sort(\r\n      (item1, item2) => item2.dateTaskCreated - item1.dateTaskCreated\r\n    );\r\n    this.updateList(updatedList);\r\n  }\r\n\r\n  sortByCompleted() {\r\n    const updatedList = this.list.sort(\r\n      (item1, item2) => item2.completed - item1.completed\r\n    );\r\n    this.updateList(updatedList);\r\n  }\r\n\r\n  sortByTimeLeft() {\r\n    const updatedList = this.list.sort(\r\n      (item1, item2) => item1.timeLeft - item2.timeLeft\r\n    );\r\n    this.updateList(updatedList);\r\n  }\r\n\r\n  validateInput(description, deadline, dateTaskCreated) {\r\n    if (description.length < 1) {\r\n      alert(\"Task can't be empty!\");\r\n      return false;\r\n    }\r\n    if (description.length > 160) {\r\n      alert(\"Task can't be longer than 160 symbols\");\r\n      return false;\r\n    }\r\n    if (deadline < dateTaskCreated && deadline !== Infinity) {\r\n      alert(\"Deadline can't be set for past time\");\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  calcTimeLeft(time) {\r\n    if (time / (1000 * 60 * 60 * 24) > 31) {\r\n      return `Time left: ${Math.round(\r\n        time / (1000 * 60 * 60 * 24 * 31)\r\n      )} months`;\r\n    }\r\n    if (time / (1000 * 60 * 60) > 24) {\r\n      return `Time left: ${Math.round(time / (1000 * 60 * 60 * 24))} days`;\r\n    }\r\n    if (time / (1000 * 60 * 60) > 1) {\r\n      return `Time left: ${Math.round(time / (1000 * 60 * 60))} hours`;\r\n    } else {\r\n      return `Time left: ${Math.round(time / (1000 * 60))} minutes`;\r\n    }\r\n  }\r\n}\r\n\r\nconst app = new App();\r\n"],"names":["$1a6cd9663479e45c$export$e6903a0a05ffe5f9","description","completed","dateTaskCreated","deadline","timeLeft","$c1ce9d969bfa6909$var$listContainer","document","querySelector","$c1ce9d969bfa6909$var$inputDescription","$c1ce9d969bfa6909$var$inputTime","$c1ce9d969bfa6909$var$addBtn","$c1ce9d969bfa6909$var$newestSort","$c1ce9d969bfa6909$var$completedSort","$c1ce9d969bfa6909$var$leastTimeLeftSort","$c1ce9d969bfa6909$var$Task","constructor","this","list","dateNow","sessionStorage","setItem","JSON","stringify","Date","now","addEventListener","addTask","bind","getSessionStorage","updateList","sortByDate","sortByCompleted","sortByTimeLeft","e","preventDefault","value","deadlineInput","Number","Infinity","validateInput","task","updatedList","deleteTask","confirm","target","attributes","data","filter","item","completeTask","map","renderTasks","tasks","html","check","displayedLeft","calcTimeLeft","Math","round","innerHTML","parse","getItem","completeBtns","querySelectorAll","deleteBtns","forEach","btn","sort","item1","item2","length","alert","time"],"version":3,"file":"index.603aa0c8.js.map"}